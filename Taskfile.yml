version: '3'

vars:
  bin_name: "flow-go"

tasks:
  default:
    desc: List available tasks.
    silent: true
    cmds:
      - task --list

  setup:
    desc: Ensure Go is installed and download Flow CLI dependencies.
    silent: true
    cmds:
      - |
        set -euo pipefail
        if ! command -v go >/dev/null 2>&1; then
          echo "Go toolchain 'go' not found in PATH."
          echo "Install it from https://go.dev/doc/install"
          exit 1
        fi
        go version >/dev/null
        repo_root="$PWD"
        pushd cli/flow >/dev/null
        export GOCACHE="${GOCACHE:-$repo_root/.gocache}"
        export GOMODCACHE="${GOMODCACHE:-$repo_root/.gomodcache}"
        mkdir -p "$GOCACHE"
        mkdir -p "$GOMODCACHE"
        if ! go mod download >/dev/null; then
          echo "Warning: unable to download Go modules; try again once network access is available."
        fi
        popd >/dev/null
        echo "✔️ you are setup"

  flow:
    desc: Run the Flow CLI (passes CLI args through).
    silent: true
    cmds:
      - |
        set -euo pipefail
        repo_root="$PWD"
        tmp_root="${TMPDIR:-/tmp}"
        tmp_dir="$(mktemp -d "$tmp_root/flow-task-XXXXXX")"
        trap 'rm -rf "$tmp_dir"' EXIT
        pushd cli/flow >/dev/null
        export GOCACHE="${GOCACHE:-$repo_root/.gocache}"
        export GOMODCACHE="${GOMODCACHE:-$repo_root/.gomodcache}"
        mkdir -p "$GOCACHE"
        mkdir -p "$GOMODCACHE"
        go build -o "$tmp_dir/flow" .
        popd >/dev/null
        "$tmp_dir/flow"{{if .CLI_ARGS}} {{.CLI_ARGS}}{{end}}

  dev:
    desc: Alias for `task flow`.
    silent: true
    cmds:
      - |
        set -euo pipefail
        task flow -- {{.CLI_ARGS}}

  run:
    desc: Alias for `task flow`.
    silent: true
    cmds:
      - |
        set -euo pipefail
        task flow -- {{.CLI_ARGS}}

  install-flow:
    desc: Build the Flow CLI binary, install it to ~/bin, and optionally add ~/bin to PATH for your shell.
    silent: true
    cmds:
      - |
        set -euo pipefail
        repo_root="$PWD"
        install_dir="$HOME/bin"
        mkdir -p "$install_dir"

        pushd cli/flow >/dev/null
        export GOCACHE="${GOCACHE:-$repo_root/.gocache}"
        export GOMODCACHE="${GOMODCACHE:-$repo_root/.gomodcache}"
        mkdir -p "$GOCACHE"
        mkdir -p "$GOMODCACHE"
        tmp_root="${TMPDIR:-/tmp}"
        tmp_dir="$(mktemp -d "$tmp_root/flow-install-XXXXXX")"
        trap 'rm -rf "$tmp_dir"' EXIT
        go build -o "$tmp_dir/{{.bin_name}}" .
        popd >/dev/null
        install_path="$install_dir/{{.bin_name}}"
        mv "$tmp_dir/{{.bin_name}}" "$install_path"
        chmod 755 "$install_path"
        rm -rf "$tmp_dir"
        echo "Installed CLI to $install_path"

        case ":${PATH:-}:" in
          *:"$install_dir":*)
            echo "$install_dir already present in PATH"
            exit 0
            ;;
        esac

        shell_name="$(basename "${SHELL:-}")"
        marker="# >>> flow-go initialize >>>"
        end_marker="# <<< flow-go initialize <<<"
        target=""
        snippet=""

        case "$shell_name" in
          fish)
            target="$HOME/.config/fish/conf.d/flow-go.fish"
            snippet='fish_add_path $HOME/bin'
            ;;
          zsh)
            target="$HOME/.zshrc"
            snippet='export PATH="$HOME/bin:$PATH"'
            ;;
          bash)
            target="$HOME/.bashrc"
            snippet='export PATH="$HOME/bin:$PATH"'
            ;;
          *)
            echo "$install_dir is not on PATH. Add it to your shell configuration manually."
            exit 0
            ;;
        esac

        if [ -n "$target" ] && [ -f "$target" ] && grep -F "$marker" "$target" >/dev/null 2>&1; then
          echo "$install_dir already configured via $target"
          exit 0
        fi

        printf 'Add %s to PATH in %s? [y/N]: ' "$install_dir" "${target:-manual}"
        read -r reply || reply=""
        case "$reply" in
          [yY]*)
            mkdir -p "$(dirname "$target")"
            if [ "$shell_name" = "fish" ]; then
              {
                echo "$marker"
                echo "$snippet"
                echo "$end_marker"
              } > "$target"
            else
              {
                printf '\n%s\n' "$marker"
                printf '%s\n' "$snippet"
                printf '%s\n' "$end_marker"
              } >> "$target"
            fi
            echo "Updated $target. Restart your shell or source the file to use flow-go."
            ;;
          *)
            echo "Skipped PATH update. Add $install_dir to PATH manually if needed."
            ;;
        esac
